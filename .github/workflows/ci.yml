name: "CI/CD - Release Workflow"

on:
  push:
    branches: 
      - releases/*

permissions:
  contents: write
env:
  BUMP_AUTHOR_MAIL: "t1000@felix-schober.de"
  BUMP_AUTHOR_NAME: "T1000 BOT"
jobs:

  cicd:
    name: CI/CD - Build app
    runs-on: ubuntu-latest

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
        
      - name: clean install dependencies
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: install

      - name: install vsce
        run: npm install -g vsce

      - name: build extension and ui
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: build-prod

      - name: compile and create vsix
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: vsce-package

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*  # Ensure all tags are fetched
          LATEST_TAG=$(git tag | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found. Exiting..."
            exit 1
          fi
          echo "Latest tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Create new release tag
        run: |
          git config --local user.email ${{env.BUMP_AUTHOR_MAIL}}
          git config --local user.name ${{env.BUMP_AUTHOR_NAME}}
          git tag -a ${{steps.get_latest_tag.outputs.tag}}-release -f -m "Release ${{steps.get_latest_tag.outputs.tag}}"
          git push origin -f --tags

      - name: upload vsix as artifact
        uses: actions/upload-artifact@v4
        with:
          name: t200logs-${{steps.get_latest_tag.outputs.tag}}.vsix
          path: ${{github.workspace}}/out/t200logs.vsix

      # CHANGELOG BUILD

      - name: fetch all history and tags from all branches
        run: git fetch --prune --unshallow

      - name: Get previous release tag
        id: prev_release_tag
        run: |
            PREV_RELEASE_TAG=$(git tag --sort=-version:refname | grep -E '^(.*)-release$' | tail -1 | head -1)
            if [ -z "$PREV_RELEASE_TAG" ]; then
              echo "No previous release found. Exiting..."
              exit 1
            fi
            echo "Previous release tag: $PREV_RELEASE_TAG"
            echo "prev_release_tag=$PREV_RELEASE_TAG" >> $GITHUB_OUTPUT   
      
      - name: Generate changelog for release build
        id: changelog_release
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          commitMode: false
          fromTag: ${{ steps.prev_release_tag.outputs.prev_release_tag }}
          toTag: ${{steps.get_latest_tag.outputs.tag}}
          configuration: ${{ github.workspace }}/.github/release_configuration_template.json

      - name: Print changelog
        run: echo "${{ steps.changelog_release.outputs.changelog }}"

      # RELEASE BUILD

      - name: create a release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{steps.get_latest_tag.outputs.tag}}
          release_name: ${{steps.get_latest_tag.outputs.tag}}
          body: ${{ steps.changelog_release.outputs.changelog }}
    
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{github.workspace}}/out/t200logs.vsix
          asset_name: t200logs-${{steps.get_latest_tag.outputs.tag}}.vsix
          asset_content_type: application/zip   

    

