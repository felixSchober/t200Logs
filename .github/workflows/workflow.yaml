name: "Build & Deploy"

on:
  push:
    branches: 
      - 'feature/**' # match an pushes on feature/* and feature/<any sub branch>/*
      - main
    paths-ignore: # don't run when changes made to these folders 
      - '.vscode/**'
      - 'GitVersion.yml'
      - '.eslintrc.json'
      - 'test/**'
  pull_request:
    branches: 
      - main
    paths-ignore: # don't run when changes made to these folders 
      - '.vscode/**'
      - 'GitVersion.yml'
      - '.eslintrc.json'
      - 'test/**'
  
env:
  BUMP_MESSAGE_PREFIX: "BUMP version to"
  BUMP_AUTHOR_MAIL: "t1000@felix-schober.de"
  BUMP_AUTHOR_NAME: "T1000 BOT"

permissions:
  contents: write
  pull-requests: write
    
jobs:
  detect_ci_trigger:
    name: Detect CI trigger
    runs-on: ubuntu-latest
    outputs:
      execute_pr: ${{ steps.last_commit_author.outputs.execute_jobs }}
      execute_push: ${{ steps.check_not_pr.outputs.execute_jobs }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Fetch the current branch
        run: git fetch origin ${{ github.ref}}

      - name: Log base and head commits
        run: |
          echo "Base branch: ${{ github.base_ref }}"
          echo "Ref branch: ${{ github.ref }}"
          echo "Head ref": ${{ github.head_ref }}

      - name: Log commits
        if: github.event_name == 'pull_request'
        run: |
          BASE_COMMIT=$(git rev-parse origin/${{ github.base_ref }})
          HEAD_COMMIT=$(git rev-parse HEAD)
          echo "Base commit: $BASE_COMMIT"
          echo "Head commit: $HEAD_COMMIT"

      - name: Echo the commit message of the last commit
        if: github.event_name == 'pull_request'
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
          echo $LAST_COMMIT_MESSAGE

      # If we are not in a PR, we don't need to check the last commit author
      # (E.g. push to main we always want to run the CI/CD job)
      - name: Output execute_jobs=true if not a PR
        if: github.event_name != 'pull_request'
        id: check_not_pr
        run: echo "execute_jobs=true" >> $GITHUB_OUTPUT

      - name: Check last commit author
        if: github.event_name == 'pull_request'
        id: last_commit_author
        run: |
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          echo "Last commit author email: $AUTHOR_EMAIL"
          if [ "$AUTHOR_EMAIL" = ${{env.BUMP_AUTHOR_MAIL}} ]; then
            echo "execute_jobs=false" >> $GITHUB_OUTPUT
          else
            echo "execute_jobs=true" >> $GITHUB_OUTPUT
          fi
    

  version_bump:
    name: Bump version
    runs-on: ubuntu-latest
    needs: detect_ci_trigger
    if: github.event_name == 'pull_request' && needs.detect_ci_trigger.outputs.execute_pr == 'true'

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.USER_PAT }} # This is a user PAT with repo scope to allow the action to push the version bump commit to the repo
                                         # If we'd use the default GITHUB_TOKEN, the action would not retrigger itself and the required status checks would not be run

      - name: fetch all history and tags from all branches for gitversion
        run: git fetch --prune --unshallow

      - name: install gitversion tool
        uses: gittools/actions/gitversion/setup@v0.11.0
        with:
            versionSpec: '5.x'
      
      - name: execute gitversion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.11.0
        
      - name: print gitversion
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

      - name: update metadata in extension package.json
        uses: onlyutkarsh/patch-files-action@v1.0.5
        with:
          files: '${{github.workspace}}/src/extension/package.json'
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.majorMinorPatch }}"
            = /displayName => "Teams Logs Viewer"
            = /description => "Extension to make diagnosing Teams logs much easier. Open this extension in a folder containing Teams logs and it will combine them into a single view with filtering and visual hints."

      - name: update metadata in ui package.json
        uses: onlyutkarsh/patch-files-action@v1.0.5
        with:
          files: '${{github.workspace}}/src/ui/package.json'
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.majorMinorPatch }}"

      - name: update metadata in root package.json
        uses: onlyutkarsh/patch-files-action@v1.0.5
        with:
          files: '${{github.workspace}}/package.json'
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.majorMinorPatch }}"

      - name: Build change log
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          commitMode: true
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}",
              "categories": [
                {
                    "title": "## Feature",
                    "labels": ["feat", "feature"]
                },
                {
                    "title": "## Fix",
                    "labels": ["fix", "bug"]
                },
                {
                    "title": "## Other",
                    "labels": []
                }
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|bump|Bump|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "target": "$1"
                }
              ],
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}    
      
      - name: add version in CHANGELOG.md
        uses: cschleiden/replace-tokens@v1
        with:
          files: '${{github.workspace}}/README.md'
        env:
          NEW_VERSION: "${{ steps.gitversion.outputs.majorMinorPatch }}"
          CHANGES: "${{ steps.changelog.outputs.changelog }}\n\n### #{NEW_VERSION}#\n\n#{CHANGES}#"

        # If we are in a PR, commit the changes to the branch
      - name: commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
            commit_message: ${{ env.BUMP_MESSAGE_PREFIX}} ${{ steps.gitversion.outputs.majorMinorPatch }}
            tagging_message: v${{ steps.gitversion.outputs.majorMinorPatch }}
            commit_user_email: ${{env.BUMP_AUTHOR_MAIL}}
            commit_user_name: ${{env.BUMP_AUTHOR_NAME}}

  cicd:
    name: CI/CD
    runs-on: ubuntu-latest
    needs: detect_ci_trigger
    if: needs.detect_ci_trigger.outputs.execute_pr == 'true' || needs.detect_ci_trigger.outputs.execute_push == 'true'

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
        
      - name: clean install dependencies
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: install

      - name: lint
        if: github.event_name == 'pull_request'
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: lint

      - name: install vsce
        run: npm install -g vsce

      - name: build extension and ui
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: build-prod

      - name: compile and create vsix
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: vsce-package

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*  # Ensure all tags are fetched
          LATEST_TAG=$(git tag | sort -V | tail -n1)
          if [ -z "$LATEST_TAG" ]; then
            echo "No tags found. Exiting..."
            exit 1
          fi
          echo "Latest tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT


      - name: upload vsix as artifact
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        with:
          name: t200logs-${{steps.get_latest_tag.outputs.tag}}.vsix
          path: ${{github.workspace}}/out/t200logs.vsix

      - uses: release-drafter/release-drafter@v5
        # (Optional) specify config name to use, relative to .github/. Default: release-drafter.yml
        # with:
        #   config-name: my-config.yml
        #   disable-autolabeler: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: create a release
        id: create_release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{steps.get_latest_tag.outputs.tag}}
          release_name: ${{steps.get_latest_tag.outputs.tag}}
    
      - name: Upload Release Asset
        id: upload-release-asset 
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{github.workspace}}/out/t200logs.vsix
          asset_name: t200logs-${{steps.get_latest_tag.outputs.tag}}.vsix
          asset_content_type: application/zip