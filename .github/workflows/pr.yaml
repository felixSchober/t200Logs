name: "PR - Build, Bump and Changelog"

on:
  pull_request:
    branches: 
      - main
    paths-ignore: # don't run when changes made to these folders 
      - '.vscode/**'
      - 'GitVersion.yml'
      - '.eslintrc.json'
      - 'test/**'
  
env:
  BUMP_MESSAGE_PREFIX: "BUMP version to"
  BUMP_AUTHOR_MAIL: "t1000@felix-schober.de"
  BUMP_AUTHOR_NAME: "T1000 BOT"

permissions:
  contents: write
  pull-requests: write
    
jobs:
  detect_ci_trigger:
    name: PR - Detect CI trigger
    runs-on: ubuntu-latest
    outputs:
      execute_pr: ${{ steps.last_commit_author.outputs.execute_jobs }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Fetch the current branch
        run: git fetch origin ${{ github.ref}}

      - name: Log base and head commits
        run: |
          echo "Base branch: ${{ github.base_ref }}"
          echo "Ref branch: ${{ github.ref }}"
          echo "Head ref": ${{ github.head_ref }}

      - name: Log commits
        run: |
          BASE_COMMIT=$(git rev-parse origin/${{ github.base_ref }})
          HEAD_COMMIT=$(git rev-parse HEAD)
          echo "Base commit: $BASE_COMMIT"
          echo "Head commit: $HEAD_COMMIT"

      - name: Echo the commit message of the last commit
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=format:%s)
          echo $LAST_COMMIT_MESSAGE

      - name: Check last commit author
        id: last_commit_author
        run: |
          AUTHOR_EMAIL=$(git log -1 --pretty=format:'%ae')
          echo "Last commit author email: $AUTHOR_EMAIL"
          if [ "$AUTHOR_EMAIL" = ${{env.BUMP_AUTHOR_MAIL}} ]; then
            echo "execute_jobs=false" >> $GITHUB_OUTPUT
          else
            echo "execute_jobs=true" >> $GITHUB_OUTPUT
          fi

  build_changelog:
    name: PR - Build changelog
    runs-on: ubuntu-latest
    needs: detect_ci_trigger
    outputs:
      changelog_pr: ${{ steps.changelog_pr.outputs.changelog }}
      changelog_failed: ${{ steps.changelog_pr.outputs.failed }}
      
    if: needs.detect_ci_trigger.outputs.execute_pr == 'true'

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        
      - name: fetch all history and tags from all branches
        run: git fetch --prune --unshallow

      - name: Generate changelog for PR build
        id: changelog_pr
        uses: mikepenz/release-changelog-builder-action@v5.0.0-a02
        with:
          mode: "COMMIT"
          commitMode: true
          includeOpen: true
          configuration: .github/release_configuration_template.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: print changelog
        run: echo "${{ steps.changelog_pr.outputs.changelog }}"

  version_bump:
    name: PR - Bump version
    runs-on: ubuntu-latest
    needs: 
      - detect_ci_trigger
      - build_changelog
      - build
    if: needs.detect_ci_trigger.outputs.execute_pr == 'true'

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.USER_PAT }} # This is a user PAT with repo scope to allow the action to push the version bump commit to the repo
                                         # If we'd use the default GITHUB_TOKEN, the action would not retrigger itself and the required status checks would not be run

      - name: fetch all history and tags from all branches for gitversion
        run: git fetch --prune --unshallow

      - name: install gitversion tool
        uses: gittools/actions/gitversion/setup@v0.13.2
        with:
            versionSpec: '5.x'
      
      - name: execute gitversion
        id: gitversion # step id used as reference for output values
        uses: gittools/actions/gitversion/execute@v0.13.2
        with:
            useConfigFile: true
            additionalArguments: "/b ${{ github.head_ref }}"
        
      - name: print gitversion
        run: |
          echo "Major: ${{ steps.gitversion.outputs.major }}"
          echo "Minor: ${{ steps.gitversion.outputs.minor }}"
          echo "Patch: ${{ steps.gitversion.outputs.patch }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"

      - name: update metadata in extension package.json
        uses: onlyutkarsh/patch-files-action@v1.0.5
        with:
          files: '${{github.workspace}}/src/extension/package.json'
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.majorMinorPatch }}"
            = /displayName => "Teams Logs Viewer"
            = /description => "Extension to make diagnosing Teams logs much easier. Open this extension in a folder containing Teams logs and it will combine them into a single view with filtering and visual hints."

      - name: update metadata in ui package.json
        uses: onlyutkarsh/patch-files-action@v1.0.5
        with:
          files: '${{github.workspace}}/src/ui/package.json'
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.majorMinorPatch }}"

      - name: update metadata in root package.json
        uses: onlyutkarsh/patch-files-action@v1.0.5
        with:
          files: '${{github.workspace}}/package.json'
          patch-syntax: |
            = /version => "${{ steps.gitversion.outputs.majorMinorPatch }}"

      - name: Print changelog failed
        run: echo "changelog_failed=${{ needs.build_changelog.outputs.changelog_failed }}"

      - name: add version in CHANGELOG.md
        if: ${{ needs.build_changelog.outputs.changelog_failed }} == 'false'
        uses: cschleiden/replace-tokens@v1
        with:
          files: '${{github.workspace}}/README.md'
        env:
          NEW_VERSION: "${{ steps.gitversion.outputs.majorMinorPatch }}"
          CHANGES: "${{ needs.build_changelog.outputs.changelog_pr }}\n\n### #{NEW_VERSION}#\n\n#{CHANGES}#"

        # If we are in a PR, commit the changes to the branch
      - name: commit and push changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
            commit_message: ${{ env.BUMP_MESSAGE_PREFIX}} ${{ steps.gitversion.outputs.majorMinorPatch }}
            commit_user_email: ${{env.BUMP_AUTHOR_MAIL}}
            commit_user_name: ${{env.BUMP_AUTHOR_NAME}}
            commit_author: ${{env.BUMP_AUTHOR_NAME}} <${{env.BUMP_AUTHOR_MAIL}}>

      - name: tag the commit
        run: |
          git config --local user.email ${{env.BUMP_AUTHOR_MAIL}}
          git config --local user.name ${{env.BUMP_AUTHOR_NAME}}
          git tag -a v${{ steps.gitversion.outputs.majorMinorPatch }} -f -m "Release ${{ steps.gitversion.outputs.majorMinorPatch }} through PR ${{ github.event.pull_request.number }}"
          git push origin

      - name: create PR comment with new version
        uses: mshick/add-pr-comment@v2
        with:
              message: Version bump to ${{ steps.gitversion.outputs.majorMinorPatch }}\n\n${{needs.build_changelog.outputs.changelog_pr}}
              message-id: "bump-version"

  build:
    name: PR - Build
    runs-on: ubuntu-latest
    needs: 
      - detect_ci_trigger
      - build_changelog
    if: needs.detect_ci_trigger.outputs.execute_pr == 'true'

    steps:
      - name: checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetches all history for all branches and tags

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: '21.x'
        
      - name: clean install dependencies
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: install

      - name: lint
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: lint

      - name: install vsce
        run: npm install -g vsce

      - name: build extension and ui
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: build-prod

      - name: compile and create vsix
        uses: borales/actions-yarn@v5.0.0
        with:
          cmd: vsce-package